{"version":3,"sources":["scripts/app.js"],"names":["angular","module","acmeMalarkey","malarkey","linkFunc","scope","el","forEachExtraValue","value","typist","type","pause","typeSpeed","deleteSpeed","pauseDelay","loop","postfix","addClass","forEach","extraValues","directive","restrict","template","link","$inject","MainController","GameModel","SweetAlert","moment","start","name","then","onGameStart","vm","phase","sendGuess","model","onSendGuessResponse","time","message","win","duration","format","num","join","swal","this","resetGuess","guessNext","controller","GameApi","$q","colors","isString","lenght","reject","data","_model","key","game_key","guess","emptyGuesses","length","guessComplete","pastResults","transformColors","map","getCode","send","onGuessSent","past_results","reverse","getWinData","pastResult","guessAsArray","split","solved","time_taken","num_guesses","further_instructions","color","code","index","indexOf","EMPTY_GUESS","size","push","origin","css","service","$http","api","method","headers","Content-Type","url","concat","user","response","runBlock","$log","debug","run","constant","R","B","G","Y","O","P","C","M","config","$logProvider","debugEnabled"],"mappings":"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","file":"scripts/app-800ce200f7.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi', ['ngAria', 'oitozero.ngSweetAlert']);\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .directive('acmeMalarkey', acmeMalarkey);\n\n  /** @ngInject */\n  function acmeMalarkey(malarkey) {\n    var directive = {\n      restrict: 'E',\n      scope: {\n        extraValues: '='\n      },\n      template: '&nbsp;',\n      link: linkFunc\n    };\n\n    return directive;\n\n    function linkFunc(scope, el) {\n      var typist = malarkey(el[0], {\n        typeSpeed: 40,\n        deleteSpeed: 40,\n        pauseDelay: 800,\n        loop: true,\n        postfix: ' '\n      });\n\n      el.addClass('acme-malarkey');\n\n      angular.forEach(scope.extraValues, forEachExtraValue);\n\n      function forEachExtraValue(value) {\n        typist.type(value).pause()['delete']();\n      }\n    }\n\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .controller('MainController', MainController);\n\n  /** @ngInject */\n  function MainController(GameModel, SweetAlert, moment) {\n    var vm = this;\n\n    vm.phase = 'welcome';\n    vm.start = start;\n    vm.model = GameModel;\n    vm.resetGuess = vm.model.resetGuess;\n    vm.guessNext = vm.model.guessNext;\n    vm.sendGuess = sendGuess;\n\n    function start(name) {\n      GameModel.start(name).then(onGameStart);\n    }\n\n    function onGameStart() {\n      vm.phase = 'playing';\n    }\n\n    function sendGuess() {\n      vm.model.sendGuess().then(onSendGuessResponse);\n    }\n\n    function onSendGuessResponse(model) {\n      var time, message;\n\n      if(model.win){\n        time = moment.duration(model.win.time, 'seconds').format('mm:ss');\n        message = ['You won with', model.win.num, 'guesses in', time, 'minutes!'].join(' ');\n\n        SweetAlert.swal('Congrats!', message, 'success');\n      }\n    }\n\n  }\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .service('GameModel', GameModel);\n\n  function GameModel(GameApi, $q, colors) {\n    var EMPTY_GUESS = {css: 'white'},\n      _model = {\n        pastResults: [],\n        win: false,\n        start: start,\n        resetGuess: resetGuess,\n        guessNext: guessNext,\n        sendGuess: sendGuess\n      };\n\n    return _model;\n\n    function start(name) {\n      if(!angular.isString(name) || name.lenght === 0)\n        return $q.reject();\n\n      return GameApi.start(name)\n        .then(onGameStart);\n    }\n\n    function onGameStart(data) {\n      _model.key = data.game_key;\n\n      _model.guess = emptyGuesses(data.colors.length);\n      _model.guessComplete = false;\n      _model.pastResults = [];\n      _model.colors = transformColors(data.colors);\n\n      return data;\n    }\n\n    function sendGuess() {\n      var key = _model.key,\n        guess = _model.guess\n          .map(getCode)\n          .join('');\n\n      return GameApi.send(key, guess)\n        .then(onGuessSent);\n    }\n\n    function onGuessSent(data) {\n      _model.pastResults = data.past_results.reverse();\n      _model.win = getWinData(data);\n      _model.guess = emptyGuesses(data.colors.length);\n      _model.guessComplete = false;\n      _model.pastResults.forEach(function (pastResult) {\n        var guessAsArray = pastResult.guess.split('');\n\n        pastResult.guess = transformColors(guessAsArray);\n      });\n\n      return _model;\n    }\n\n    function getWinData(data) {\n      if(data.solved === 'true' || data.solved === true){ // workaround\n        return {\n          time: data.time_taken,\n          num: data.num_guesses,\n          message: data.further_instructions\n        };\n      }\n\n      return false;\n    }\n\n    function getCode(color) {\n      return color.code;\n    }\n\n    function guessNext(color) {\n      var index = _model.guess.indexOf(EMPTY_GUESS);\n\n      if(index === -1) return;\n\n      _model.guess[index] = color;\n      _model.guessComplete = _model.guess.indexOf(EMPTY_GUESS) === -1;\n    }\n\n    function resetGuess(index) {\n      _model.guessComplete = false;\n      _model.guess[index] = EMPTY_GUESS;\n    }\n\n    function emptyGuesses(size) {\n      var guess = [];\n\n      for(var index=0; index<size; index++){\n        guess.push(EMPTY_GUESS);\n      }\n\n      return guess;\n    }\n\n    function transformColors(origin) {\n      return origin.map(function (color) {\n        return {\n          code: color,\n          css: colors[color]\n        }\n      });\n    }\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .service('GameApi', GameApi);\n\n  function GameApi($http, api) {\n    var service = {\n      start: start,\n      send: send\n    };\n\n    return service;\n\n    function start(name) {\n      return $http({\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        url: api.concat('/new_game'),\n        data: {\n          user: name\n        }\n      })\n      .then(function (response) {\n        return response.data;\n      });\n    }\n\n    function send(key, guess) {\n      return $http({\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        url: api.concat('/guess'),\n        data: {\n          code: guess,\n          'game_key': key\n        }\n      })\n      .then(function (response) {\n        return response.data;\n      });\n    }\n  }\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .run(runBlock);\n\n  /** @ngInject */\n  function runBlock($log) {\n\n    $log.debug('runBlock end');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n/*eslint id-length: 0*/\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment)\n    // .constant('api', 'https://az-mastermind.herokuapp.com')\n    .constant('api', 'http://mastermind-pugstunt.herokuapp.com/mastermind/v1')\n    .constant('colors', {\n      R: 'red',\n      B: 'blue',\n      G: 'green',\n      Y: 'yellow',\n      O: 'orange',\n      P: 'purple',\n      C: 'cyan',\n      M: 'pink'\n    });\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('mastermindUi')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n  }\n\n})();\n"],"sourceRoot":"/source/"}